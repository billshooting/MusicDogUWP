#pragma checksum "C:\Users\BILL\Documents\Visual Studio 2015\MusicUWP\MusicUWP\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "90205ABD3C2D98354DDD01308EC96F5D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicUWP
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_MediaElement_Volume(global::Windows.UI.Xaml.Controls.MediaElement obj, global::System.Double value)
            {
                obj.Volume = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_Foreground(global::Windows.UI.Xaml.Controls.Control obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToolTipService_ToolTip(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                global::Windows.UI.Xaml.Controls.ToolTipService.SetToolTip(obj, value);
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(global::Windows.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Value = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Maximum(global::Windows.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Maximum = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
        };

        private class MainPage_obj14_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MusicUWP.ViewModels.Song dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Windows.UI.Xaml.Controls.TextBlock obj18;

            private MainPage_obj14_BindingsTracking bindingsTracking;

            public MainPage_obj14_Bindings()
            {
                this.bindingsTracking = new MainPage_obj14_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 18:
                        this.obj18 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MusicUWP.ViewModels.Song data = args.NewValue as global::MusicUWP.ViewModels.Song;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MusicUWP.ViewModels.Song was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = 1;
                        this.SetDataRoot(args.Item as global::MusicUWP.ViewModels.Song);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                    case 1:
                        Windows.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj17);
                        Windows.UI.Xaml.Markup.XamlBindingHelper.ResumeRendering(this.obj18);
                        nextPhase = -1;
                        break;
                }
                this.Update_((global::MusicUWP.ViewModels.Song) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
                Windows.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj17);
                Windows.UI.Xaml.Markup.XamlBindingHelper.SuspendRendering(this.obj18);
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj14_Bindings

            public void SetDataRoot(global::MusicUWP.ViewModels.Song newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MusicUWP.ViewModels.Song obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_IsFavorite(obj.IsFavorite, phase);
                        this.Update_Title(obj.Title, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0) | (1 << 1))) != 0)
                    {
                        this.Update_Artist(obj.Artist, phase);
                        this.Update_Duration(obj.Duration, phase);
                    }
                }
            }
            private void Update_IsFavorite(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj15, (global::System.String)this.LookupConverter("FavBtnIconConverter").Convert(obj, typeof(global::System.String), null, null), null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj15, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("FavBtnForegroundConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_Title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                }
            }
            private void Update_Artist(global::System.String obj, int phase)
            {
                if((phase & ((1 << 1) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                }
            }
            private void Update_Duration(global::System.TimeSpan obj, int phase)
            {
                if((phase & ((1 << 1) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj18, (global::System.String)this.LookupConverter("TimeSpanConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }

            private class MainPage_obj14_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj14_Bindings> WeakRefToBindingObj; 

                public MainPage_obj14_BindingsTracking(MainPage_obj14_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj14_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj14_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MusicUWP.ViewModels.Song obj = sender as global::MusicUWP.ViewModels.Song;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_IsFavorite(obj.IsFavorite, DATA_CHANGED);
                                    bindings.Update_Title(obj.Title, DATA_CHANGED);
                                    bindings.Update_Artist(obj.Artist, DATA_CHANGED);
                                    bindings.Update_Duration(obj.Duration, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsFavorite":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsFavorite(obj.IsFavorite, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Artist":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Artist(obj.Artist, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Duration":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Duration(obj.Duration, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MusicUWP.ViewModels.Song obj)
                {
                    MainPage_obj14_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MusicUWP.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.MediaElement obj4;
            private global::Windows.UI.Xaml.Controls.Image obj5;
            private global::Windows.UI.Xaml.Controls.Button obj9;
            private global::Windows.UI.Xaml.Controls.Button obj10;
            private global::Windows.UI.Xaml.Controls.ListView obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj19;
            private global::Windows.UI.Xaml.Controls.TextBlock obj22;
            private global::Windows.UI.Xaml.Controls.Slider obj23;
            private global::Windows.UI.Xaml.Controls.TextBlock obj24;
            private global::Windows.UI.Xaml.Controls.TextBlock obj26;
            private global::Windows.UI.Xaml.Controls.TextBlock obj27;
            private global::Windows.UI.Xaml.Controls.TextBlock obj29;
            private global::Windows.UI.Xaml.Controls.TextBlock obj33;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.MediaElement)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 19:
                        this.obj19 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 22:
                        this.obj22 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 23:
                        this.obj23 = (global::Windows.UI.Xaml.Controls.Slider)target;
                        break;
                    case 24:
                        this.obj24 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 26:
                        this.obj26 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 27:
                        this.obj27 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 29:
                        this.obj29 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 33:
                        this.obj33 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj1_Bindings

            public void SetDataRoot(global::MusicUWP.MainPage newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MusicUWP.MainPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_VolumeSilder(obj.VolumeSilder, phase);
                        this.Update_PlayerBarState(obj.PlayerBarState, phase);
                        this.Update_PlayingSongsList(obj.PlayingSongsList, phase);
                        this.Update_MusicPlayer(obj.MusicPlayer, phase);
                    }
                }
            }
            private void Update_VolumeSilder(global::Windows.UI.Xaml.Controls.Slider obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_VolumeSilder(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_VolumeSilder_Value(obj.Value, phase);
                    }
                }
            }
            private void Update_VolumeSilder_Value(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_MediaElement_Volume(this.obj4, (global::System.Double)this.LookupConverter("VolumeConverter").Convert(obj, typeof(global::System.Double), null, null));
                }
            }
            private void Update_PlayerBarState(global::MusicUWP.ViewModels.PlayerBarViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PlayerBarState(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PlayerBarState_CurrentSong(obj.CurrentSong, phase);
                        this.Update_PlayerBarState_PlayMode(obj.PlayMode, phase);
                        this.Update_PlayerBarState_PlayedPosition(obj.PlayedPosition, phase);
                        this.Update_PlayerBarState_IsPlaying(obj.IsPlaying, phase);
                    }
                }
            }
            private void Update_PlayerBarState_CurrentSong(global::MusicUWP.ViewModels.Song obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PlayerBarState_CurrentSong(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PlayerBarState_CurrentSong_AlbumCover(obj.AlbumCover, phase);
                        this.Update_PlayerBarState_CurrentSong_IsFavorite(obj.IsFavorite, phase);
                        this.Update_PlayerBarState_CurrentSong_Title(obj.Title, phase);
                        this.Update_PlayerBarState_CurrentSong_Artist(obj.Artist, phase);
                    }
                }
            }
            private void Update_PlayerBarState_CurrentSong_AlbumCover(global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj5, obj, "/Assets/Default/Default.jpg");
                }
            }
            private void Update_PlayerBarState_CurrentSong_IsFavorite(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj9, (global::System.Object)this.LookupConverter("FavBtnIconConverter").Convert(obj, typeof(global::System.Object), null, null), "");
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Foreground(this.obj9, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("FavBtnForegroundConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                }
            }
            private void Update_PlayerBarState_PlayMode(global::MusicUWP.ViewModels.PlayMode obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj10, (global::System.Object)this.LookupConverter("ModeIconConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToolTipService_ToolTip(this.obj10, (global::System.Object)this.LookupConverter("ModeTextConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj22, (global::System.String)this.LookupConverter("ModeTextConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_PlayingSongsList(global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PlayingSongsList(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PlayingSongsList_Count(obj.Count, phase);
                    }
                }
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj13, obj, null);
                }
            }
            private void Update_PlayingSongsList_Count(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj19, (global::System.String)this.LookupConverter("CountConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_PlayerBarState_PlayedPosition(global::System.TimeSpan obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj23, (global::System.Double)this.LookupConverter("SliderValueConverter").Convert(obj, typeof(global::System.Double), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj27, (global::System.String)this.LookupConverter("TimeSpanConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_MusicPlayer(global::Windows.UI.Xaml.Controls.MediaElement obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_MusicPlayer(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_MusicPlayer_NaturalDuration(obj.NaturalDuration, phase);
                    }
                }
            }
            private void Update_MusicPlayer_NaturalDuration(global::Windows.UI.Xaml.Duration obj, int phase)
            {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this.Update_MusicPlayer_NaturalDuration_TimeSpan(obj.TimeSpan, phase);
            }
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj29, (global::System.String)this.LookupConverter("PlayerBarDurationConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_MusicPlayer_NaturalDuration_TimeSpan(global::System.TimeSpan obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Maximum(this.obj23, (global::System.Double)this.LookupConverter("SliderValueConverter").Convert(obj, typeof(global::System.Double), null, null));
                }
            }
            private void Update_PlayerBarState_CurrentSong_Title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj24, obj, null);
                }
            }
            private void Update_PlayerBarState_CurrentSong_Artist(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj26, obj, null);
                }
            }
            private void Update_PlayerBarState_IsPlaying(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj33, (global::System.String)this.LookupConverter("PlayBtnIconConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }

            private class MainPage_obj1_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj1_Bindings> WeakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_VolumeSilder(null);
                    UpdateChildListeners_PlayerBarState(null);
                    UpdateChildListeners_PlayerBarState_CurrentSong(null);
                    UpdateChildListeners_PlayingSongsList(null);
                    UpdateChildListeners_MusicPlayer(null);
                }

                public void DependencyPropertyChanged_VolumeSilder_Value(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Windows.UI.Xaml.Controls.Slider obj = sender as global::Windows.UI.Xaml.Controls.Slider;
        if (obj != null)
        {
            bindings.Update_VolumeSilder_Value(obj.Value, DATA_CHANGED);
        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.Slider cache_VolumeSilder = null;
                private long tokenDPC_VolumeSilder_Value = 0;
                public void UpdateChildListeners_VolumeSilder(global::Windows.UI.Xaml.Controls.Slider obj)
                {
                    if (obj != cache_VolumeSilder)
                    {
                        if (cache_VolumeSilder != null)
                        {
                            cache_VolumeSilder.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Slider.ValueProperty, tokenDPC_VolumeSilder_Value);
                            cache_VolumeSilder = null;
                        }
                        if (obj != null)
                        {
                            cache_VolumeSilder = obj;
                            tokenDPC_VolumeSilder_Value = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Slider.ValueProperty, DependencyPropertyChanged_VolumeSilder_Value);
                        }
                    }
                }
                public void PropertyChanged_PlayerBarState(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MusicUWP.ViewModels.PlayerBarViewModel obj = sender as global::MusicUWP.ViewModels.PlayerBarViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_PlayerBarState_CurrentSong(obj.CurrentSong, DATA_CHANGED);
                                    bindings.Update_PlayerBarState_PlayMode(obj.PlayMode, DATA_CHANGED);
                                    bindings.Update_PlayerBarState_PlayedPosition(obj.PlayedPosition, DATA_CHANGED);
                                    bindings.Update_PlayerBarState_IsPlaying(obj.IsPlaying, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CurrentSong":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerBarState_CurrentSong(obj.CurrentSong, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlayMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerBarState_PlayMode(obj.PlayMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlayedPosition":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerBarState_PlayedPosition(obj.PlayedPosition, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPlaying":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerBarState_IsPlaying(obj.IsPlaying, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MusicUWP.ViewModels.PlayerBarViewModel cache_PlayerBarState = null;
                public void UpdateChildListeners_PlayerBarState(global::MusicUWP.ViewModels.PlayerBarViewModel obj)
                {
                    if (obj != cache_PlayerBarState)
                    {
                        if (cache_PlayerBarState != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PlayerBarState).PropertyChanged -= PropertyChanged_PlayerBarState;
                            cache_PlayerBarState = null;
                        }
                        if (obj != null)
                        {
                            cache_PlayerBarState = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PlayerBarState;
                        }
                    }
                }
                public void PropertyChanged_PlayerBarState_CurrentSong(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MusicUWP.ViewModels.Song obj = sender as global::MusicUWP.ViewModels.Song;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_PlayerBarState_CurrentSong_AlbumCover(obj.AlbumCover, DATA_CHANGED);
                                    bindings.Update_PlayerBarState_CurrentSong_IsFavorite(obj.IsFavorite, DATA_CHANGED);
                                    bindings.Update_PlayerBarState_CurrentSong_Title(obj.Title, DATA_CHANGED);
                                    bindings.Update_PlayerBarState_CurrentSong_Artist(obj.Artist, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "AlbumCover":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerBarState_CurrentSong_AlbumCover(obj.AlbumCover, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsFavorite":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerBarState_CurrentSong_IsFavorite(obj.IsFavorite, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerBarState_CurrentSong_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Artist":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayerBarState_CurrentSong_Artist(obj.Artist, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MusicUWP.ViewModels.Song cache_PlayerBarState_CurrentSong = null;
                public void UpdateChildListeners_PlayerBarState_CurrentSong(global::MusicUWP.ViewModels.Song obj)
                {
                    if (obj != cache_PlayerBarState_CurrentSong)
                    {
                        if (cache_PlayerBarState_CurrentSong != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PlayerBarState_CurrentSong).PropertyChanged -= PropertyChanged_PlayerBarState_CurrentSong;
                            cache_PlayerBarState_CurrentSong = null;
                        }
                        if (obj != null)
                        {
                            cache_PlayerBarState_CurrentSong = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PlayerBarState_CurrentSong;
                        }
                    }
                }
                public void PropertyChanged_PlayingSongsList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_PlayingSongsList_Count(obj.Count, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Count":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PlayingSongsList_Count(obj.Count, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PlayingSongsList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song>;
                if (obj != null)
                {
                        bindings.Update_PlayingSongsList_Count(obj.Count, DATA_CHANGED);
                }
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song> cache_PlayingSongsList = null;
                public void UpdateChildListeners_PlayingSongsList(global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song> obj)
                {
                    if (obj != cache_PlayingSongsList)
                    {
                        if (cache_PlayingSongsList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PlayingSongsList).PropertyChanged -= PropertyChanged_PlayingSongsList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_PlayingSongsList).CollectionChanged -= CollectionChanged_PlayingSongsList;
                            cache_PlayingSongsList = null;
                        }
                        if (obj != null)
                        {
                            cache_PlayingSongsList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PlayingSongsList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_PlayingSongsList;
                        }
                    }
                }
                public void DependencyPropertyChanged_MusicPlayer_NaturalDuration(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Windows.UI.Xaml.Controls.MediaElement obj = sender as global::Windows.UI.Xaml.Controls.MediaElement;
        if (obj != null)
        {
            bindings.Update_MusicPlayer_NaturalDuration(obj.NaturalDuration, DATA_CHANGED);
        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.MediaElement cache_MusicPlayer = null;
                private long tokenDPC_MusicPlayer_NaturalDuration = 0;
                public void UpdateChildListeners_MusicPlayer(global::Windows.UI.Xaml.Controls.MediaElement obj)
                {
                    if (obj != cache_MusicPlayer)
                    {
                        if (cache_MusicPlayer != null)
                        {
                            cache_MusicPlayer.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.MediaElement.NaturalDurationProperty, tokenDPC_MusicPlayer_NaturalDuration);
                            cache_MusicPlayer = null;
                        }
                        if (obj != null)
                        {
                            cache_MusicPlayer = obj;
                            tokenDPC_MusicPlayer_NaturalDuration = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.MediaElement.NaturalDurationProperty, DependencyPropertyChanged_MusicPlayer_NaturalDuration);
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1:
                {
                    this.MainPageName = (global::Windows.UI.Xaml.Controls.Page)(target);
                    #line 10 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Page)this.MainPageName).Loaded += this.MainPageName_Loaded;
                    #line default
                }
                break;
            case 2:
                {
                    this.MainPageSplitView = (global::Windows.UI.Xaml.Controls.SplitView)(target);
                }
                break;
            case 3:
                {
                    this.BottomPlayBar = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 4:
                {
                    this.MusicPlayer = (global::Windows.UI.Xaml.Controls.MediaElement)(target);
                    #line 340 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.MediaElement)this.MusicPlayer).MediaOpened += this.MusicPlayer_MediaOpened;
                    #line 341 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.MediaElement)this.MusicPlayer).MediaEnded += this.MusicPlayer_MediaEnded;
                    #line default
                }
                break;
            case 5:
                {
                    this.PlayerBarCover = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            case 6:
                {
                    this.PlayControlPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 7:
                {
                    this.PlayInfoBar = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 8:
                {
                    this.AdditionalControlPanel = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 9:
                {
                    this.FavoriteSongButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 211 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.FavoriteSongButton).Click += this.FavoriteSongButton_Click;
                    #line default
                }
                break;
            case 10:
                {
                    this.ModeSelcetButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 217 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.ModeSelcetButton).Click += this.ModeSelcetButton_Click;
                    #line default
                }
                break;
            case 11:
                {
                    this.VoiceVolumeButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 12:
                {
                    this.PlayListButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 20:
                {
                    this.FavorAllBtn = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 276 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.FavorAllBtn).Click += this.FavorAllBtn_Click;
                    #line default
                }
                break;
            case 21:
                {
                    this.VolumeSilder = (global::Windows.UI.Xaml.Controls.Slider)(target);
                }
                break;
            case 23:
                {
                    this.PlayBarSlider = (global::Windows.UI.Xaml.Controls.Slider)(target);
                    #line 192 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Slider)this.PlayBarSlider).ValueChanged += this.PlayBarSlider_ValueChanged;
                    #line default
                }
                break;
            case 24:
                {
                    this.SongNameTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 25:
                {
                    this.SymbolTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 27:
                {
                    this.PlayedTimeTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 28:
                {
                    this.SlashTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 29:
                {
                    this.DurationTextBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 30:
                {
                    this.PreviousSongButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 31:
                {
                    this.PlayStopButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 124 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.PlayStopButton).Click += this.PlayStopButton_Click;
                    #line default
                }
                break;
            case 32:
                {
                    this.NextSongButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 33:
                {
                    this.PlayBtnText = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 34:
                {
                    this.LeftDockList = (global::Windows.UI.Xaml.Controls.ListBox)(target);
                    #line 31 "..\..\..\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ListBox)this.LeftDockList).SelectionChanged += this.LeftDockList_SelectionChanged;
                    #line default
                }
                break;
            case 35:
                {
                    this.HamburgerButton = (global::Windows.UI.Xaml.Controls.ListBoxItem)(target);
                }
                break;
            case 36:
                {
                    this.BandList = (global::Windows.UI.Xaml.Controls.ListBoxItem)(target);
                }
                break;
            case 37:
                {
                    this.Download = (global::Windows.UI.Xaml.Controls.ListBoxItem)(target);
                }
                break;
            case 38:
                {
                    this.LocalMusic = (global::Windows.UI.Xaml.Controls.ListBoxItem)(target);
                }
                break;
            case 39:
                {
                    this.FavoriteList = (global::Windows.UI.Xaml.Controls.ListBoxItem)(target);
                }
                break;
            case 40:
                {
                    this.SearchMusic = (global::Windows.UI.Xaml.Controls.ListBoxItem)(target);
                }
                break;
            case 41:
                {
                    this.ContentFrame = (global::Windows.UI.Xaml.Controls.Frame)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 14:
                {
                    global::Windows.UI.Xaml.Controls.Grid element14 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj14_Bindings bindings = new MainPage_obj14_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MusicUWP.ViewModels.Song) element14.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element14.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element14, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

