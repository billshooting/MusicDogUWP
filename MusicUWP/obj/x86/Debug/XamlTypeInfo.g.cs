//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace MusicUWP
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::MusicUWP.MusicUWP_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace MusicUWP.MusicUWP_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[48];
            _typeNameTable[0] = "MusicUWP.Converter.VolumeStringConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "MusicUWP.Converter.TimeSpanStringConverter";
            _typeNameTable[3] = "MusicUWP.Converter.TimeIntStringConverter";
            _typeNameTable[4] = "MusicUWP.Converter.TimeSpanIntConverter";
            _typeNameTable[5] = "MusicUWP.Converter.BoolIconConverter";
            _typeNameTable[6] = "MusicUWP.Converter.DoubleStringConverter";
            _typeNameTable[7] = "MusicUWP.Converter.ListRowBackGroundConverter";
            _typeNameTable[8] = "MusicUWP.Converter.ListViewItemStyleSelector";
            _typeNameTable[9] = "Windows.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[10] = "MusicUWP.Converter.PlayModeIconConverter";
            _typeNameTable[11] = "MusicUWP.Converter.PlayModeTextConverter";
            _typeNameTable[12] = "MusicUWP.Converter.FavoriteIconConverter";
            _typeNameTable[13] = "MusicUWP.Converter.FavIconForegroundConverter";
            _typeNameTable[14] = "MusicUWP.Converter.SongsCountConverter";
            _typeNameTable[15] = "MusicUWP.Converter.BoolVisibilityConverter";
            _typeNameTable[16] = "MusicUWP.Converter.BoolVisibilityReverser";
            _typeNameTable[17] = "MusicUWP.Converter.DurationPlayerBarConverter";
            _typeNameTable[18] = "MusicUWP.Converter.FolderToString";
            _typeNameTable[19] = "MusicUWP.MainPage";
            _typeNameTable[20] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[22] = "MusicUWP.ViewModels.PlayerBarViewModel";
            _typeNameTable[23] = "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.Song>";
            _typeNameTable[24] = "System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.Song>";
            _typeNameTable[25] = "MusicUWP.ViewModels.Song";
            _typeNameTable[26] = "Int32";
            _typeNameTable[27] = "String";
            _typeNameTable[28] = "TimeSpan";
            _typeNameTable[29] = "System.ValueType";
            _typeNameTable[30] = "Boolean";
            _typeNameTable[31] = "Windows.UI.Xaml.Media.Imaging.BitmapImage";
            _typeNameTable[32] = "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.LocalSong>";
            _typeNameTable[33] = "System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.LocalSong>";
            _typeNameTable[34] = "MusicUWP.ViewModels.LocalSong";
            _typeNameTable[35] = "Windows.Storage.StorageFile";
            _typeNameTable[36] = "Windows.Storage.StorageFolder";
            _typeNameTable[37] = "MusicUWP.ViewPage.BandCoverPage";
            _typeNameTable[38] = "MusicUWP.Models.SongResponseBandList";
            _typeNameTable[39] = "MusicUWP.ViewPage.BandListPage";
            _typeNameTable[40] = "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.WebSong>";
            _typeNameTable[41] = "System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.WebSong>";
            _typeNameTable[42] = "MusicUWP.ViewModels.WebSong";
            _typeNameTable[43] = "MusicUWP.ViewPage.DownloadPage";
            _typeNameTable[44] = "MusicUWP.ViewPage.FavoriteListPage";
            _typeNameTable[45] = "MusicUWP.ViewPage.LocalMusicPage";
            _typeNameTable[46] = "MusicUWP.ViewPage.MusicListBar";
            _typeNameTable[47] = "MusicUWP.ViewPage.SearchSongPage";

            _typeTable = new global::System.Type[48];
            _typeTable[0] = typeof(global::MusicUWP.Converter.VolumeStringConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::MusicUWP.Converter.TimeSpanStringConverter);
            _typeTable[3] = typeof(global::MusicUWP.Converter.TimeIntStringConverter);
            _typeTable[4] = typeof(global::MusicUWP.Converter.TimeSpanIntConverter);
            _typeTable[5] = typeof(global::MusicUWP.Converter.BoolIconConverter);
            _typeTable[6] = typeof(global::MusicUWP.Converter.DoubleStringConverter);
            _typeTable[7] = typeof(global::MusicUWP.Converter.ListRowBackGroundConverter);
            _typeTable[8] = typeof(global::MusicUWP.Converter.ListViewItemStyleSelector);
            _typeTable[9] = typeof(global::Windows.UI.Xaml.Controls.StyleSelector);
            _typeTable[10] = typeof(global::MusicUWP.Converter.PlayModeIconConverter);
            _typeTable[11] = typeof(global::MusicUWP.Converter.PlayModeTextConverter);
            _typeTable[12] = typeof(global::MusicUWP.Converter.FavoriteIconConverter);
            _typeTable[13] = typeof(global::MusicUWP.Converter.FavIconForegroundConverter);
            _typeTable[14] = typeof(global::MusicUWP.Converter.SongsCountConverter);
            _typeTable[15] = typeof(global::MusicUWP.Converter.BoolVisibilityConverter);
            _typeTable[16] = typeof(global::MusicUWP.Converter.BoolVisibilityReverser);
            _typeTable[17] = typeof(global::MusicUWP.Converter.DurationPlayerBarConverter);
            _typeTable[18] = typeof(global::MusicUWP.Converter.FolderToString);
            _typeTable[19] = typeof(global::MusicUWP.MainPage);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[22] = typeof(global::MusicUWP.ViewModels.PlayerBarViewModel);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song>);
            _typeTable[24] = typeof(global::System.Collections.ObjectModel.Collection<global::MusicUWP.ViewModels.Song>);
            _typeTable[25] = typeof(global::MusicUWP.ViewModels.Song);
            _typeTable[26] = typeof(global::System.Int32);
            _typeTable[27] = typeof(global::System.String);
            _typeTable[28] = typeof(global::System.TimeSpan);
            _typeTable[29] = typeof(global::System.ValueType);
            _typeTable[30] = typeof(global::System.Boolean);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Media.Imaging.BitmapImage);
            _typeTable[32] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.LocalSong>);
            _typeTable[33] = typeof(global::System.Collections.ObjectModel.Collection<global::MusicUWP.ViewModels.LocalSong>);
            _typeTable[34] = typeof(global::MusicUWP.ViewModels.LocalSong);
            _typeTable[35] = typeof(global::Windows.Storage.StorageFile);
            _typeTable[36] = typeof(global::Windows.Storage.StorageFolder);
            _typeTable[37] = typeof(global::MusicUWP.ViewPage.BandCoverPage);
            _typeTable[38] = typeof(global::MusicUWP.Models.SongResponseBandList);
            _typeTable[39] = typeof(global::MusicUWP.ViewPage.BandListPage);
            _typeTable[40] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.WebSong>);
            _typeTable[41] = typeof(global::System.Collections.ObjectModel.Collection<global::MusicUWP.ViewModels.WebSong>);
            _typeTable[42] = typeof(global::MusicUWP.ViewModels.WebSong);
            _typeTable[43] = typeof(global::MusicUWP.ViewPage.DownloadPage);
            _typeTable[44] = typeof(global::MusicUWP.ViewPage.FavoriteListPage);
            _typeTable[45] = typeof(global::MusicUWP.ViewPage.LocalMusicPage);
            _typeTable[46] = typeof(global::MusicUWP.ViewPage.MusicListBar);
            _typeTable[47] = typeof(global::MusicUWP.ViewPage.SearchSongPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_VolumeStringConverter() { return new global::MusicUWP.Converter.VolumeStringConverter(); }
        private object Activate_2_TimeSpanStringConverter() { return new global::MusicUWP.Converter.TimeSpanStringConverter(); }
        private object Activate_3_TimeIntStringConverter() { return new global::MusicUWP.Converter.TimeIntStringConverter(); }
        private object Activate_4_TimeSpanIntConverter() { return new global::MusicUWP.Converter.TimeSpanIntConverter(); }
        private object Activate_5_BoolIconConverter() { return new global::MusicUWP.Converter.BoolIconConverter(); }
        private object Activate_6_DoubleStringConverter() { return new global::MusicUWP.Converter.DoubleStringConverter(); }
        private object Activate_7_ListRowBackGroundConverter() { return new global::MusicUWP.Converter.ListRowBackGroundConverter(); }
        private object Activate_8_ListViewItemStyleSelector() { return new global::MusicUWP.Converter.ListViewItemStyleSelector(); }
        private object Activate_10_PlayModeIconConverter() { return new global::MusicUWP.Converter.PlayModeIconConverter(); }
        private object Activate_11_PlayModeTextConverter() { return new global::MusicUWP.Converter.PlayModeTextConverter(); }
        private object Activate_12_FavoriteIconConverter() { return new global::MusicUWP.Converter.FavoriteIconConverter(); }
        private object Activate_13_FavIconForegroundConverter() { return new global::MusicUWP.Converter.FavIconForegroundConverter(); }
        private object Activate_14_SongsCountConverter() { return new global::MusicUWP.Converter.SongsCountConverter(); }
        private object Activate_15_BoolVisibilityConverter() { return new global::MusicUWP.Converter.BoolVisibilityConverter(); }
        private object Activate_16_BoolVisibilityReverser() { return new global::MusicUWP.Converter.BoolVisibilityReverser(); }
        private object Activate_17_DurationPlayerBarConverter() { return new global::MusicUWP.Converter.DurationPlayerBarConverter(); }
        private object Activate_18_FolderToString() { return new global::MusicUWP.Converter.FolderToString(); }
        private object Activate_19_MainPage() { return new global::MusicUWP.MainPage(); }
        private object Activate_22_PlayerBarViewModel() { return new global::MusicUWP.ViewModels.PlayerBarViewModel(); }
        private object Activate_23_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song>(); }
        private object Activate_24_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MusicUWP.ViewModels.Song>(); }
        private object Activate_25_Song() { return new global::MusicUWP.ViewModels.Song(); }
        private object Activate_32_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.LocalSong>(); }
        private object Activate_33_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MusicUWP.ViewModels.LocalSong>(); }
        private object Activate_34_LocalSong() { return new global::MusicUWP.ViewModels.LocalSong(); }
        private object Activate_37_BandCoverPage() { return new global::MusicUWP.ViewPage.BandCoverPage(); }
        private object Activate_38_SongResponseBandList() { return new global::MusicUWP.Models.SongResponseBandList(); }
        private object Activate_39_BandListPage() { return new global::MusicUWP.ViewPage.BandListPage(); }
        private object Activate_40_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.WebSong>(); }
        private object Activate_41_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MusicUWP.ViewModels.WebSong>(); }
        private object Activate_42_WebSong() { return new global::MusicUWP.ViewModels.WebSong(); }
        private object Activate_43_DownloadPage() { return new global::MusicUWP.ViewPage.DownloadPage(); }
        private object Activate_44_FavoriteListPage() { return new global::MusicUWP.ViewPage.FavoriteListPage(); }
        private object Activate_45_LocalMusicPage() { return new global::MusicUWP.ViewPage.LocalMusicPage(); }
        private object Activate_46_MusicListBar() { return new global::MusicUWP.ViewPage.MusicListBar(); }
        private object Activate_47_SearchSongPage() { return new global::MusicUWP.ViewPage.SearchSongPage(); }
        private void VectorAdd_23_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MusicUWP.ViewModels.Song>)instance;
            var newItem = (global::MusicUWP.ViewModels.Song)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MusicUWP.ViewModels.Song>)instance;
            var newItem = (global::MusicUWP.ViewModels.Song)item;
            collection.Add(newItem);
        }
        private void VectorAdd_32_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MusicUWP.ViewModels.LocalSong>)instance;
            var newItem = (global::MusicUWP.ViewModels.LocalSong)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MusicUWP.ViewModels.LocalSong>)instance;
            var newItem = (global::MusicUWP.ViewModels.LocalSong)item;
            collection.Add(newItem);
        }
        private void VectorAdd_40_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MusicUWP.ViewModels.WebSong>)instance;
            var newItem = (global::MusicUWP.ViewModels.WebSong)item;
            collection.Add(newItem);
        }
        private void VectorAdd_41_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MusicUWP.ViewModels.WebSong>)instance;
            var newItem = (global::MusicUWP.ViewModels.WebSong)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MusicUWP.Converter.VolumeStringConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_VolumeStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  MusicUWP.Converter.TimeSpanStringConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_TimeSpanStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  MusicUWP.Converter.TimeIntStringConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_TimeIntStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  MusicUWP.Converter.TimeSpanIntConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_TimeSpanIntConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  MusicUWP.Converter.BoolIconConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_BoolIconConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  MusicUWP.Converter.DoubleStringConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_DoubleStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  MusicUWP.Converter.ListRowBackGroundConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_ListRowBackGroundConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  MusicUWP.Converter.ListViewItemStyleSelector
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.StyleSelector"));
                userType.Activator = Activate_8_ListViewItemStyleSelector;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Windows.UI.Xaml.Controls.StyleSelector
                xamlType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  MusicUWP.Converter.PlayModeIconConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_PlayModeIconConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  MusicUWP.Converter.PlayModeTextConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_PlayModeTextConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  MusicUWP.Converter.FavoriteIconConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_FavoriteIconConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  MusicUWP.Converter.FavIconForegroundConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_FavIconForegroundConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  MusicUWP.Converter.SongsCountConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_SongsCountConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  MusicUWP.Converter.BoolVisibilityConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_BoolVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  MusicUWP.Converter.BoolVisibilityReverser
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_BoolVisibilityReverser;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  MusicUWP.Converter.DurationPlayerBarConverter
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_DurationPlayerBarConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  MusicUWP.Converter.FolderToString
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_18_FolderToString;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  MusicUWP.MainPage
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_MainPage;
                userType.AddMemberName("PlayerBarState");
                userType.AddMemberName("FavoriteSongsList");
                userType.AddMemberName("PlayingSongsList");
                userType.AddMemberName("LocalSongsList");
                userType.AddMemberName("DownloadedSongs");
                userType.AddMemberName("DownloadFolder");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  MusicUWP.ViewModels.PlayerBarViewModel
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.Song>
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.Song>"));
                userType.CollectionAdd = VectorAdd_23_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.Song>
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_Collection;
                userType.CollectionAdd = VectorAdd_24_Collection;
                xamlType = userType;
                break;

            case 25:   //  MusicUWP.ViewModels.Song
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_Song;
                userType.AddMemberName("Id");
                userType.AddMemberName("Title");
                userType.AddMemberName("Artist");
                userType.AddMemberName("Album");
                userType.AddMemberName("Duration");
                userType.AddMemberName("IsFavorite");
                userType.AddMemberName("IsPlaying");
                userType.AddMemberName("IsLoaclSong");
                userType.AddMemberName("AlbumCover");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  Int32
                xamlType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  String
                xamlType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  TimeSpan
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  System.ValueType
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 30:   //  Boolean
                xamlType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Windows.UI.Xaml.Media.Imaging.BitmapImage
                xamlType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.LocalSong>
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.LocalSong>"));
                userType.CollectionAdd = VectorAdd_32_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.LocalSong>
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_Collection;
                userType.CollectionAdd = VectorAdd_33_Collection;
                xamlType = userType;
                break;

            case 34:   //  MusicUWP.ViewModels.LocalSong
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicUWP.ViewModels.Song"));
                userType.Activator = Activate_34_LocalSong;
                userType.AddMemberName("SongFile");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Windows.Storage.StorageFile
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Windows.Storage.StorageFolder
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  MusicUWP.ViewPage.BandCoverPage
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_BandCoverPage;
                userType.AddMemberName("TopList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  MusicUWP.Models.SongResponseBandList
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  MusicUWP.ViewPage.BandListPage
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_BandListPage;
                userType.AddMemberName("WebSongsList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.WebSong>
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.WebSong>"));
                userType.CollectionAdd = VectorAdd_40_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  System.Collections.ObjectModel.Collection`1<MusicUWP.ViewModels.WebSong>
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_41_Collection;
                userType.CollectionAdd = VectorAdd_41_Collection;
                xamlType = userType;
                break;

            case 42:   //  MusicUWP.ViewModels.WebSong
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MusicUWP.ViewModels.Song"));
                userType.Activator = Activate_42_WebSong;
                userType.AddMemberName("Albumid");
                userType.AddMemberName("Albummid");
                userType.AddMemberName("Albumpic_big");
                userType.AddMemberName("Albumpic_small");
                userType.AddMemberName("DownUrl");
                userType.AddMemberName("Singerid");
                userType.AddMemberName("Songid");
                userType.AddMemberName("Url");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  MusicUWP.ViewPage.DownloadPage
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_DownloadPage;
                userType.AddMemberName("StorageFolder");
                userType.AddMemberName("DownloadedSongs");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  MusicUWP.ViewPage.FavoriteListPage
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_44_FavoriteListPage;
                userType.AddMemberName("FavoriteSongs");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  MusicUWP.ViewPage.LocalMusicPage
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_45_LocalMusicPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  MusicUWP.ViewPage.MusicListBar
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_46_MusicListBar;
                userType.AddMemberName("Song");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  MusicUWP.ViewPage.SearchSongPage
                userType = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_47_SearchSongPage;
                userType.AddMemberName("QueryList");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MainPage_PlayerBarState(object instance)
        {
            var that = (global::MusicUWP.MainPage)instance;
            return that.PlayerBarState;
        }
        private void set_0_MainPage_PlayerBarState(object instance, object Value)
        {
            var that = (global::MusicUWP.MainPage)instance;
            that.PlayerBarState = (global::MusicUWP.ViewModels.PlayerBarViewModel)Value;
        }
        private object get_1_MainPage_FavoriteSongsList(object instance)
        {
            var that = (global::MusicUWP.MainPage)instance;
            return that.FavoriteSongsList;
        }
        private void set_1_MainPage_FavoriteSongsList(object instance, object Value)
        {
            var that = (global::MusicUWP.MainPage)instance;
            that.FavoriteSongsList = (global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song>)Value;
        }
        private object get_2_Song_Id(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.Id;
        }
        private void set_2_Song_Id(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.Id = (global::System.Int32)Value;
        }
        private object get_3_Song_Title(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.Title;
        }
        private void set_3_Song_Title(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_4_Song_Artist(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.Artist;
        }
        private void set_4_Song_Artist(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.Artist = (global::System.String)Value;
        }
        private object get_5_Song_Album(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.Album;
        }
        private void set_5_Song_Album(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.Album = (global::System.String)Value;
        }
        private object get_6_Song_Duration(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.Duration;
        }
        private void set_6_Song_Duration(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.Duration = (global::System.TimeSpan)Value;
        }
        private object get_7_Song_IsFavorite(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.IsFavorite;
        }
        private void set_7_Song_IsFavorite(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.IsFavorite = (global::System.Boolean)Value;
        }
        private object get_8_Song_IsPlaying(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.IsPlaying;
        }
        private void set_8_Song_IsPlaying(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.IsPlaying = (global::System.Boolean)Value;
        }
        private object get_9_Song_IsLoaclSong(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.IsLoaclSong;
        }
        private void set_9_Song_IsLoaclSong(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.IsLoaclSong = (global::System.Boolean)Value;
        }
        private object get_10_Song_AlbumCover(object instance)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            return that.AlbumCover;
        }
        private void set_10_Song_AlbumCover(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.Song)instance;
            that.AlbumCover = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_11_MainPage_PlayingSongsList(object instance)
        {
            var that = (global::MusicUWP.MainPage)instance;
            return that.PlayingSongsList;
        }
        private void set_11_MainPage_PlayingSongsList(object instance, object Value)
        {
            var that = (global::MusicUWP.MainPage)instance;
            that.PlayingSongsList = (global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song>)Value;
        }
        private object get_12_MainPage_LocalSongsList(object instance)
        {
            var that = (global::MusicUWP.MainPage)instance;
            return that.LocalSongsList;
        }
        private void set_12_MainPage_LocalSongsList(object instance, object Value)
        {
            var that = (global::MusicUWP.MainPage)instance;
            that.LocalSongsList = (global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.LocalSong>)Value;
        }
        private object get_13_LocalSong_SongFile(object instance)
        {
            var that = (global::MusicUWP.ViewModels.LocalSong)instance;
            return that.SongFile;
        }
        private void set_13_LocalSong_SongFile(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.LocalSong)instance;
            that.SongFile = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_14_MainPage_DownloadedSongs(object instance)
        {
            var that = (global::MusicUWP.MainPage)instance;
            return that.DownloadedSongs;
        }
        private void set_14_MainPage_DownloadedSongs(object instance, object Value)
        {
            var that = (global::MusicUWP.MainPage)instance;
            that.DownloadedSongs = (global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.LocalSong>)Value;
        }
        private object get_15_MainPage_DownloadFolder(object instance)
        {
            var that = (global::MusicUWP.MainPage)instance;
            return that.DownloadFolder;
        }
        private void set_15_MainPage_DownloadFolder(object instance, object Value)
        {
            var that = (global::MusicUWP.MainPage)instance;
            that.DownloadFolder = (global::Windows.Storage.StorageFolder)Value;
        }
        private object get_16_BandCoverPage_TopList(object instance)
        {
            var that = (global::MusicUWP.ViewPage.BandCoverPage)instance;
            return that.TopList;
        }
        private void set_16_BandCoverPage_TopList(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewPage.BandCoverPage)instance;
            that.TopList = (global::MusicUWP.Models.SongResponseBandList)Value;
        }
        private object get_17_BandListPage_WebSongsList(object instance)
        {
            var that = (global::MusicUWP.ViewPage.BandListPage)instance;
            return that.WebSongsList;
        }
        private void set_17_BandListPage_WebSongsList(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewPage.BandListPage)instance;
            that.WebSongsList = (global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.WebSong>)Value;
        }
        private object get_18_WebSong_Albumid(object instance)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            return that.Albumid;
        }
        private void set_18_WebSong_Albumid(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            that.Albumid = (global::System.Int32)Value;
        }
        private object get_19_WebSong_Albummid(object instance)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            return that.Albummid;
        }
        private void set_19_WebSong_Albummid(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            that.Albummid = (global::System.String)Value;
        }
        private object get_20_WebSong_Albumpic_big(object instance)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            return that.Albumpic_big;
        }
        private void set_20_WebSong_Albumpic_big(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            that.Albumpic_big = (global::System.String)Value;
        }
        private object get_21_WebSong_Albumpic_small(object instance)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            return that.Albumpic_small;
        }
        private void set_21_WebSong_Albumpic_small(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            that.Albumpic_small = (global::System.String)Value;
        }
        private object get_22_WebSong_DownUrl(object instance)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            return that.DownUrl;
        }
        private void set_22_WebSong_DownUrl(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            that.DownUrl = (global::System.String)Value;
        }
        private object get_23_WebSong_Singerid(object instance)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            return that.Singerid;
        }
        private void set_23_WebSong_Singerid(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            that.Singerid = (global::System.Int32)Value;
        }
        private object get_24_WebSong_Songid(object instance)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            return that.Songid;
        }
        private void set_24_WebSong_Songid(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            that.Songid = (global::System.Int32)Value;
        }
        private object get_25_WebSong_Url(object instance)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            return that.Url;
        }
        private void set_25_WebSong_Url(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewModels.WebSong)instance;
            that.Url = (global::System.String)Value;
        }
        private object get_26_DownloadPage_StorageFolder(object instance)
        {
            var that = (global::MusicUWP.ViewPage.DownloadPage)instance;
            return that.StorageFolder;
        }
        private void set_26_DownloadPage_StorageFolder(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewPage.DownloadPage)instance;
            that.StorageFolder = (global::Windows.Storage.StorageFolder)Value;
        }
        private object get_27_DownloadPage_DownloadedSongs(object instance)
        {
            var that = (global::MusicUWP.ViewPage.DownloadPage)instance;
            return that.DownloadedSongs;
        }
        private void set_27_DownloadPage_DownloadedSongs(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewPage.DownloadPage)instance;
            that.DownloadedSongs = (global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.LocalSong>)Value;
        }
        private object get_28_FavoriteListPage_FavoriteSongs(object instance)
        {
            var that = (global::MusicUWP.ViewPage.FavoriteListPage)instance;
            return that.FavoriteSongs;
        }
        private void set_28_FavoriteListPage_FavoriteSongs(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewPage.FavoriteListPage)instance;
            that.FavoriteSongs = (global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.Song>)Value;
        }
        private object get_29_MusicListBar_Song(object instance)
        {
            var that = (global::MusicUWP.ViewPage.MusicListBar)instance;
            return that.Song;
        }
        private object get_30_SearchSongPage_QueryList(object instance)
        {
            var that = (global::MusicUWP.ViewPage.SearchSongPage)instance;
            return that.QueryList;
        }
        private void set_30_SearchSongPage_QueryList(object instance, object Value)
        {
            var that = (global::MusicUWP.ViewPage.SearchSongPage)instance;
            that.QueryList = (global::System.Collections.ObjectModel.ObservableCollection<global::MusicUWP.ViewModels.WebSong>)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember xamlMember = null;
            global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MusicUWP.MainPage.PlayerBarState":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.MainPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "PlayerBarState", "MusicUWP.ViewModels.PlayerBarViewModel");
                xamlMember.Getter = get_0_MainPage_PlayerBarState;
                xamlMember.Setter = set_0_MainPage_PlayerBarState;
                break;
            case "MusicUWP.MainPage.FavoriteSongsList":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.MainPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "FavoriteSongsList", "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.Song>");
                xamlMember.Getter = get_1_MainPage_FavoriteSongsList;
                xamlMember.Setter = set_1_MainPage_FavoriteSongsList;
                break;
            case "MusicUWP.ViewModels.Song.Id":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_2_Song_Id;
                xamlMember.Setter = set_2_Song_Id;
                break;
            case "MusicUWP.ViewModels.Song.Title":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_3_Song_Title;
                xamlMember.Setter = set_3_Song_Title;
                break;
            case "MusicUWP.ViewModels.Song.Artist":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Artist", "String");
                xamlMember.Getter = get_4_Song_Artist;
                xamlMember.Setter = set_4_Song_Artist;
                break;
            case "MusicUWP.ViewModels.Song.Album":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Album", "String");
                xamlMember.Getter = get_5_Song_Album;
                xamlMember.Setter = set_5_Song_Album;
                break;
            case "MusicUWP.ViewModels.Song.Duration":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Duration", "TimeSpan");
                xamlMember.Getter = get_6_Song_Duration;
                xamlMember.Setter = set_6_Song_Duration;
                break;
            case "MusicUWP.ViewModels.Song.IsFavorite":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "IsFavorite", "Boolean");
                xamlMember.Getter = get_7_Song_IsFavorite;
                xamlMember.Setter = set_7_Song_IsFavorite;
                break;
            case "MusicUWP.ViewModels.Song.IsPlaying":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "IsPlaying", "Boolean");
                xamlMember.Getter = get_8_Song_IsPlaying;
                xamlMember.Setter = set_8_Song_IsPlaying;
                break;
            case "MusicUWP.ViewModels.Song.IsLoaclSong":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "IsLoaclSong", "Boolean");
                xamlMember.Getter = get_9_Song_IsLoaclSong;
                xamlMember.Setter = set_9_Song_IsLoaclSong;
                break;
            case "MusicUWP.ViewModels.Song.AlbumCover":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.Song");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "AlbumCover", "Windows.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Getter = get_10_Song_AlbumCover;
                xamlMember.Setter = set_10_Song_AlbumCover;
                break;
            case "MusicUWP.MainPage.PlayingSongsList":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.MainPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "PlayingSongsList", "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.Song>");
                xamlMember.Getter = get_11_MainPage_PlayingSongsList;
                xamlMember.Setter = set_11_MainPage_PlayingSongsList;
                break;
            case "MusicUWP.MainPage.LocalSongsList":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.MainPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "LocalSongsList", "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.LocalSong>");
                xamlMember.Getter = get_12_MainPage_LocalSongsList;
                xamlMember.Setter = set_12_MainPage_LocalSongsList;
                break;
            case "MusicUWP.ViewModels.LocalSong.SongFile":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.LocalSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "SongFile", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_13_LocalSong_SongFile;
                xamlMember.Setter = set_13_LocalSong_SongFile;
                break;
            case "MusicUWP.MainPage.DownloadedSongs":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.MainPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "DownloadedSongs", "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.LocalSong>");
                xamlMember.Getter = get_14_MainPage_DownloadedSongs;
                xamlMember.Setter = set_14_MainPage_DownloadedSongs;
                break;
            case "MusicUWP.MainPage.DownloadFolder":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.MainPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "DownloadFolder", "Windows.Storage.StorageFolder");
                xamlMember.Getter = get_15_MainPage_DownloadFolder;
                xamlMember.Setter = set_15_MainPage_DownloadFolder;
                break;
            case "MusicUWP.ViewPage.BandCoverPage.TopList":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewPage.BandCoverPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "TopList", "MusicUWP.Models.SongResponseBandList");
                xamlMember.Getter = get_16_BandCoverPage_TopList;
                xamlMember.Setter = set_16_BandCoverPage_TopList;
                break;
            case "MusicUWP.ViewPage.BandListPage.WebSongsList":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewPage.BandListPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "WebSongsList", "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.WebSong>");
                xamlMember.Getter = get_17_BandListPage_WebSongsList;
                xamlMember.Setter = set_17_BandListPage_WebSongsList;
                break;
            case "MusicUWP.ViewModels.WebSong.Albumid":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.WebSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Albumid", "Int32");
                xamlMember.Getter = get_18_WebSong_Albumid;
                xamlMember.Setter = set_18_WebSong_Albumid;
                break;
            case "MusicUWP.ViewModels.WebSong.Albummid":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.WebSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Albummid", "String");
                xamlMember.Getter = get_19_WebSong_Albummid;
                xamlMember.Setter = set_19_WebSong_Albummid;
                break;
            case "MusicUWP.ViewModels.WebSong.Albumpic_big":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.WebSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Albumpic_big", "String");
                xamlMember.Getter = get_20_WebSong_Albumpic_big;
                xamlMember.Setter = set_20_WebSong_Albumpic_big;
                break;
            case "MusicUWP.ViewModels.WebSong.Albumpic_small":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.WebSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Albumpic_small", "String");
                xamlMember.Getter = get_21_WebSong_Albumpic_small;
                xamlMember.Setter = set_21_WebSong_Albumpic_small;
                break;
            case "MusicUWP.ViewModels.WebSong.DownUrl":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.WebSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "DownUrl", "String");
                xamlMember.Getter = get_22_WebSong_DownUrl;
                xamlMember.Setter = set_22_WebSong_DownUrl;
                break;
            case "MusicUWP.ViewModels.WebSong.Singerid":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.WebSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Singerid", "Int32");
                xamlMember.Getter = get_23_WebSong_Singerid;
                xamlMember.Setter = set_23_WebSong_Singerid;
                break;
            case "MusicUWP.ViewModels.WebSong.Songid":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.WebSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Songid", "Int32");
                xamlMember.Getter = get_24_WebSong_Songid;
                xamlMember.Setter = set_24_WebSong_Songid;
                break;
            case "MusicUWP.ViewModels.WebSong.Url":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewModels.WebSong");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Url", "String");
                xamlMember.Getter = get_25_WebSong_Url;
                xamlMember.Setter = set_25_WebSong_Url;
                break;
            case "MusicUWP.ViewPage.DownloadPage.StorageFolder":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewPage.DownloadPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "StorageFolder", "Windows.Storage.StorageFolder");
                xamlMember.Getter = get_26_DownloadPage_StorageFolder;
                xamlMember.Setter = set_26_DownloadPage_StorageFolder;
                break;
            case "MusicUWP.ViewPage.DownloadPage.DownloadedSongs":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewPage.DownloadPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "DownloadedSongs", "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.LocalSong>");
                xamlMember.Getter = get_27_DownloadPage_DownloadedSongs;
                xamlMember.Setter = set_27_DownloadPage_DownloadedSongs;
                break;
            case "MusicUWP.ViewPage.FavoriteListPage.FavoriteSongs":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewPage.FavoriteListPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "FavoriteSongs", "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.Song>");
                xamlMember.Getter = get_28_FavoriteListPage_FavoriteSongs;
                xamlMember.Setter = set_28_FavoriteListPage_FavoriteSongs;
                break;
            case "MusicUWP.ViewPage.MusicListBar.Song":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewPage.MusicListBar");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "Song", "MusicUWP.ViewModels.Song");
                xamlMember.Getter = get_29_MusicListBar_Song;
                xamlMember.SetIsReadOnly();
                break;
            case "MusicUWP.ViewPage.SearchSongPage.QueryList":
                userType = (global::MusicUWP.MusicUWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MusicUWP.ViewPage.SearchSongPage");
                xamlMember = new global::MusicUWP.MusicUWP_XamlTypeInfo.XamlMember(this, "QueryList", "System.Collections.ObjectModel.ObservableCollection`1<MusicUWP.ViewModels.WebSong>");
                xamlMember.Getter = get_30_SearchSongPage_QueryList;
                xamlMember.Setter = set_30_SearchSongPage_QueryList;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MusicUWP.MusicUWP_XamlTypeInfo.XamlSystemBaseType
    {
        global::MusicUWP.MusicUWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MusicUWP.MusicUWP_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::MusicUWP.MusicUWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MusicUWP.MusicUWP_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

